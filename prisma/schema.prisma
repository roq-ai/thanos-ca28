generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model organization {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description          String?                @db.VarChar(255)
  image                String?                @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  user_id              String                 @db.Uuid
  tenant_id            String                 @db.VarChar(255)
  user                 user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post                 post[]
  social_media_account social_media_account[]
}

model post {
  id                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content                 String
  scheduled_time          DateTime              @db.Timestamp(6)
  organization_id         String?               @db.Uuid
  social_media_account_id String?               @db.Uuid
  created_at              DateTime              @default(now()) @db.Timestamp(6)
  updated_at              DateTime              @default(now()) @db.Timestamp(6)
  organization            organization?         @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  social_media_account    social_media_account? @relation(fields: [social_media_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model social_media_account {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  platform        String        @db.VarChar(255)
  username        String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  post            post[]
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}
